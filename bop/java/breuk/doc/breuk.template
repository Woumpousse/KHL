<!DOCTYPE html>
<html>
  <head>
    <title>BOP: Breuk</title>
    <meta charset="utf-8">
    <script src="jquery.js"></script>
    <script src="khl.js"></script>
    <link rel="stylesheet" href="khl.css">
    <style>
      .center {
        display: block;
        margin: 10px auto;
      }
    </style>
  </head>
  <body>
    <div id="contents">
      <h1>Breuk</h1>
      <section>
        <h2>Inleiding</h2>
        <p>
          Java heeft standaard geen ondersteuning voor breuken. Een <code>double</code> vormt
          hier niet echt een goed alternatief voor: veel breuken kunnen niet exact
          voorgesteld worden door een <code>double</code>. Door ons eigen <code>Breuk</code>-klasse
          te ontwerpen kunnen we dit probleem verhelpen.
        </p>
      </section>

      <section>
        <h2>Velden</h2>
        <p>
          Vaak beginnen we bij het schrijven van een nieuwe klasse met de velden.
          Zonder velden hebben de methodes immers niets om op in te werken.
        </p>
        <p>
          Een breuk bestaat uit twee componenten:
        </p>
        <ul>
          <li>De teller</li>
          <li>De noemer</li>
        </ul>
        <p>
          Dit zijn meteen ook de enige twee velden die nodig zijn. Immers, wat zou een breuk meer moeten onthouden over zichzelf?
        </p>

        <div data-question="fill-in-blanks" id="field-types">
          <p>
            Vul de veldtypes in.
          </p>
          <pre><%= fields.code %></pre>
        </div>

        <p>
          Er is echter wel een probleem met onze voorstelling: meerdere breuken die in feite gelijk zijn kunnen voorgesteld
          worden door objecten met ongelijke velden. Enkele voorbeelden:
        </p>
        <ul>
          <li>De breuk 2/4 is wiskundig gezien gelijk aan 1/2.</li>
          <li>De breuk -2/3 is equivalent met 2/-3.</li>
        </ul>
        <p>
          Wanneer zulk een fenomeen zich voordoet, kan men best gebruik maken van een <em>canonieke vorm</em>.
          Dit houdt in dat alle gelijke breuken voorgesteld worden door dezelfde interne waarden. Voor breuken defini&euml;ren
          we de canonieke vorm als volgt:
        </p>
        <ul id="canonical">
          <li>
            De grootste gemene deler van teller en noemer moet gelijk zijn aan 1. Met andere woorden,
            een canonieke vorm mag niet vereenvoudigbaar zijn. 2/4 is dus niet canoniek, maar wel 1/2.
          </li>
          <li>
            De noemer moet altijd positief zijn. Indien deze negatief is, kan met het teken verplaatsen naar de teller.
          </li>
          <li>
            Een breuk kan gelijk zijn aan 0: voorbeelden hiervan zijn 0/5 en 0/9. Als canonieke vorm
            kiezen we 0/1 om 0 voor te stellen. Dit is conform de vorige regels: 1 is positief, en de grootste
            gemene deler van 0 en 1 is 1.
          </li>
        </ul>
        <div data-question="fill-in-blanks">
          <p>
            Herschrijf de volgende breuken in hun canonieke vorm:
          </p>
          <%=
             HTML::unordered_list( [[3,6], [1,3], [-6,10], [2,-3], [6,3], [9,-6]] ) do |a, b|
               "#{a}/#{b} = " + HTML::blank_inputbox( simplify_s(a,b), '', 'ignore_whitespace')
             end
          %>
        </div>
        <p>
          Laten we nu code schrijven.
        </p>
      </section>

      <section>
        <h2>Eclipse</h2>
        <p>
          Start Eclipse op. Maak een nieuw project aan (vergeet niet de meest recente Javaversie te kiezen).
          Je krijgt al wat code van ons; download deze <a href="code.zip">hier</a> en voeg
          deze toe aan je project. Het gaat om de klassen <code>Util</code> en <code>BreukTest</code>.
        </p>
        <p>
          Normaliter zal Eclipse klagen over het bestand <code>BreukTest</code> zoals hieronder getoond.
        </p>
        <img class="center" src="errors.png"></img>
        <p>
          De reden hiervoor is omdat <code>BreukTest</code> gebruik maakt van een externe library,
          dewelke je nog moet toevoegen aan je project. De eenvoudigste manier om dit te doen
          is door met je muiscursor over <code>@Test</code> te hoveren, d.i. er met de cursor
          naartoe te gaan zonder te klikken. Na een ogenblik zou je volgend menu moeten zien verschijnen:
        </p>
        <img class="center" src="junit-fix.png"></img>
        <p>
          Selecteer de optie om JUnit 4 aan de build path toe te voegen. Er zouden nu nog tal
          van fouten moeten zijn van het type <code>Breuk cannot be resolved to a type</code>.
          Dit is normaal: je hebt de klasse <code>Breuk</code> immers nog nergens gedefinieerd.
        </p>
        <p>
          Je kan de tests al eens uitvoeren. Je kan hiervoor gebruik maken van de toolbarknop:
        </p>
        <img class="center" src="run-test.png"></img>
        <p>
          De meeste tests falen, wat te verwachten viel.
        </p>
      </section>
      
      <section>
        <h2>Implementatie Basiselementen</h2>
        <p>
          Voeg een nieuwe klasse toe aan je project, genaamd <code>Breuk</code>. Eclipse
          maakt een nieuw bestand <code>Breuk.java</code> aan. Vul dit aan met de velden <code>teller</code> en <code>noemer</code> (de code zie je <a href="#field-types">hier</a>.)
        </p>
        <p>
          Nu kunnen we een breuk aanmaken met de volgende code:
        </p>
        <pre><%= format('Breuk breuk = new Breuk();') %></pre>
        <p>
          We stellen ons nu de vraag welke breuk <code>breuk</code> voorstelt; we hebben immers nergens een teller of noemer gespecificeerd.
          We kunnen momenteel ook niet de teller- of noemerwaarden opvragen: de velden zijn private. Zo kunnen we volgende code proberen te gebruiken om de teller op te vragen:
        </p>
        <pre><%= format('int teller = breuk.teller') %></pre>
        <p>
          Eclipse zal aangeven dat dit fout is met als melding <code>The field Breuk.teller is not visible</code>.
          We zouden ervoor kunnen kiezen om het veld <code>teller</code> publiek te maken, dan zou bovenstaande
          code wel werken. Dit is echter niet aangeraden: <code>teller</code> stelt de interne toestand voor,
          de "organen" van het object als het ware, en deze dienen beschermd te blijven.
        </p>
        <p>
          Om gebruikers van <code>Breuk</code> toch de mogelijkheid te geven om teller en noemer
          op te vragen, kunnen we getter-methodes ter beschikking stellen. Methodes van een klasse
          kunnen w&eacute;l altijd aan de private componenten van de klasse waartoe ze behoren;
          m.a.w. ze kunnen wel aan de velden <code>teller</code> en <code>noemer</code>.
        </p>
        <p>
          Een getter voor de teller heet volgens de Java-conventies <code>getTeller</code>.
          De code ziet er als volgt uit:
        </p>
        <pre><%= getTeller_code %></pre>
        <p>
          Let op de volgende details:
        </p>
        <ul>
          <li>
            <p>De access modifier <code>public</code> geeft aan dat de methode <code>getTeller</code> mag opgeroepen
            worden door gebruikers van de <code>Breuk</code>-klasse. Volgende code is dus geldig:</p>
            <pre><%= getTeller_code %></pre>
            <p>Bovenstaande code maakt eerst een <code>Breuk</code>-object aan en bewaart deze in een variabele
              met naam <code>breuk</code>. Vervolgens wordt aan dit object gevraagd wat zijn teller
              is via het oproepen van <code>getTeller</code>. Het resultaat van de oproep wordt opgeslagen
              in de variabele <code>teller</code>.
            </p>
            <p>Variabelenamen zijn altijd vrij te kiezen: we vragen je dat ze voldoen aan de conventies (<a href="http://en.wikipedia.org/wiki/Naming_convention_(programming)#Java">camel case</a>)
              en descriptief is. Bovenstaande code had evengoed zo kunnen geschreven worden:
            </p>
        <pre><%= getTeller_code2 %></pre>
          </li>
          <li>
            <p>Het returntype van de methode is <code>int</code>: dit betekent dat de methode <code>getTeller</code> een <code>int</code>
              teruggeeft als resultaat. Dit is vrij logisch: de teller wordt intern voorgesteld door een <code>int</code>, en als
              we deze opvragen, verwachten we dan ook een <code>int</code>. Doorgaans zal een getter dus
              als returntype het type van het overeenkomstig veld hebben.
            </p>
          </li>
          <li>
            <p>
              De <code>getTeller</code>-methode verwacht geen parameters: dit is te zien aan de haakjes <code>()</code> waartussen normaalgezien
              de parameters staan. <code>()</code> stelt de lege parameterlijst voor, m.a.w. <code>getTeller</code> verwacht geen parameters.
            </p>
          </li>
          <li>
            <p>
              De body van de <code>getTeller</code>-methode bestaat uit een enkele statement, nl. de <code>return</code>.
              Een methode maakt gebruik van <code>return</code> om aan te geven welk resultaat het wil opleveren.
              In ons geval wil de <code>getTeller</code>-methode als resultaat de waarde van het veld <code>teller</code> opleveren.
            </p>
          </li>
        </ul>

        <div data-question="extern">
          <p>
            Kopieer de code <code>getTeller</code> naar Eclipse. Schrijf tevens de getter <code>getNoemer</code>.
          </p>
        </div>
        
        <p>
          Nu we getters hebben gedefinieerd, kunnen we de teller en noemer opvragen van een <code>Breuk</code>-object.
          We vroegen ons eerder af welke teller- en noemerwaarden we krijgen bij volgende code:
        </p>
        <pre><%= getters_code %></pre>
        <div data-question="fill-in-blanks">
          <p>
            Maak een klasse <code>App</code> aan met daarin een <code>main</code>-methode. Ter herinnering, de <code>main</code>-methode
            ziet er als volgt uit:
          </p>
          <pre><%= format('public static void main(String[] args) { ... }') %></pre>
          <p>
            Schrijf bovenstaande code over en voeg code toe (<%= format('System.out.println') %>) om de waarden
            van <code>teller</code> en <code>noemer</code> naar het scherm te printen. Vul de waarden in die je ontvangt:
          </p>
          <ul>
            <li><code>teller = </code><%= HTML::blank_inputbox('0')%></li>
            <li><code>noemer = </code><%= HTML::blank_inputbox('0')%></li>
          </ul>
        </div>
        <p>
          In de huidige situatie zitten we dus vast met <code>Breuk</code>-objecten die 0/0 voorstellen.
          Dit is problematisch: we kunnen maar &eacute;&eacute;n breukwaarde voorstellen,
          en deze is dan nog eens wiskundig ongeldig. Er zijn dus twee problemen die we wensen op te lossen:
        </p>
        <ul>
          <li>
            We willen kunnen aangeven welke breukwaarde een <code>Breuk</code>-object voorstelt.
            Zo willen we <code>Breuk</code>-objecten kunnen aanmaken die 2/3, -4/9, &hellip; voorstellen.
          </li>
          <li>
            We willen kunnen verbieden dat er ongeldige breuken aangemaakt worden. M.a.w. de noemer mag niet 0 zijn.
          </li>
        </ul>
        <p>
          <em>Constructoren</em> bieden een oplossing voor beide deze problemen. Een constructor
          is een speciale methode die automatisch wordt opgeroepen bij de aanmaak van een object (m.a.w. wanneer
          <code>new</code> wordt gebruikt). Een constructor kan parameters hebben dewelke
          hij gebruikt om te weten hoe het nieuwe object moet ge&iuml;nitialiseerd moet worden.
          In ons geval zal de <code>Breuk</code>-constructor twee parameters hebben:
          &eacute;&eacute;n voor de teller, &eacute;&eacute;n voor de noemer.
        </p>
        <pre><%= constructor_code %></pre>
        <p>
          Let op het volgende:
        </p>
        <ul>
          <li>
            <p>Een constructor heeft dezelfde naam als de klasse waartoe deze behoort.</p>
          </li>
          <li>
            <p>Een constructor heeft <em>geen</em> returntype.</p>
          </li>
          <li>
            <p>
              De constructor heeft twee parameters, genaamd <code>a</code> en <code>b</code>, dewelke
              gebruikt worden om <code>teller</code> en <code>noemer</code>, respectievelijk, te initialiseren.
              <code>a</code> en <code>b</code> zijn echter geen goede namen; het gaat
              om de teller en noemer van de breuk, dus in principe zouden de parameters zelf ook
              <code>teller</code> en <code>noemer</code> moeten heten. De velden hebben deze namen echter al, wat
              voor problemen zorgt. Later zullen we zien hoe we dit probleem elegant kunnen oplossen.
            </p>
          </li>
        </ul>
        <p>
          Nu we een constructor hebben gedefinieerd met twee parameters, moeten we bij aanmaak van een
          <code>Breuk</code>-object tevens twee argumenten meegeven.
        </p>
        <pre><%= breuk_creation %></pre>
        <div data-question="fill-in-blanks">
          <pre><%= interpret_creation.code %></pre>
          <p>
            Zonder gebruik te maken van Eclipse, wat is de uitvoer van dit programma? <%= HTML::blank_inputbox(interpret_creation.output, '', 'ignore_whitespace') %>
          </p>
        </div>

        <div data-question="extern">
          <p>
            Voeg de constructor toe aan je Eclipse-code. Voer de tests uit. De test met naam <code>testConstructor</code>
            zou moeten slagen.
          </p>
        </div>

        <p>
          De constructor staat nog niet op punt: een <code>0</code> ingeven als noemer wordt aanvaard. We moeten de constructor
          laten checken op geldige waarden.
        </p>

        <div data-question="extern">
          <p>
            Voeg code toe aan de constructor die nagaat of de gegeven noemer (m.a.w. parameter <code>b</code>) gelijk is aan <code>0</code>
            m.b.v. een <a href="http://docs.oracle.com/javase/tutorial/java/nutsandbolts/if.html">if-statement</a>.
            Indien dit het geval, moet het programma afgebroken worden met een <em>exception</em>. Dit doe je met d.m.v. volgende code:
          </p>
          <pre><%= format('throw new IllegalArgumentException();') %></pre>
          <p>
            Indien je de constructor correct hebt uitgebreid, zou de test <code>constructor_NoemerMagNietNulZijn</code> ook moeten slagen.
          </p>
        </div>

        <p>
          De constructor staat nog niet op punt. We hadden het eerder over de canonieke vorm. We willen
          nu dat de constructor, gegeven een teller en een noemer, de breuk vereenvoudigt volgens
          de <a href="#canonical">eerder vermelde regels</a>.
        </p>

        <p>
          Om in Java de canonieke vorm te vinden, kan je als volgt te werk gaan:
        </p>
        <ol>
          <li>
            <p>Zorg er eerst voor dat de noemer positief is. Je kan het teken omkeren van een variabele d.m.v. <code>x = -x;</code></p>
          </li>
          <li>
           <p>Neem de grootste gemene deler van de teller en de noemer. Om de grootste gemene deler van de waarden in variabelen <code>x</code>
             en <code>y</code> te vinden, kan je gebruik maken van de volgende code:
           </p>
           <pre><%= format('int ggdVanXEnY = Util.ggd(x, y);') %></pre>
          </li>
          <li>
            <p>Deel beide teller en noemer door deze grootste gemene deler.</p>
          </li>
        </ol>

        <div data-question="extern">
          <p>
            Voeg code toe aan de constructor die de teller en noemer naar canonieke vorm omzet.
          </p>
          <p>
            Indien je de constructor correct hebt uitgebreid, zouden de tests <code>constructor_MetVereenvoudigen</code> en <code>constructor_MetVereenvoudigen2</code> ook moeten slagen.
          </p>
        </div>

        <div data-question="fill-in-blanks">
          <pre><%= interpret_canonical.code %></pre>
          <p>
            Zonder gebruik te maken van Eclipse, wat is de uitvoer van dit programma? <%= HTML::blank_inputbox(interpret_canonical.output, '', 'ignore_whitespace') %>
          </p>
        </div>
      </section>

      <section>
        <h2>Tweede Constructor</h2>
        <p>
          Een klasse kan meerdere constructoren defini&euml;ren. Stel dat we een gewoon geheel getal willen voorstellen
          als een breuk, bv. 8/1. Momenteel moeten we hiervoor
        </p>
        <pre><%= format('Breuk b = new Breuk(8, 1);') %></pre>
        <p>
          schrijven. Een alternatieve, eenvoudigere syntax zou zijn
        </p>
        <pre><%= format('Breuk b = new Breuk(8); // maakt 8/1 aan') %></pre>
        <p>
          Momenteel dicteert de <code>Breuk</code>-constructor dat we bij het aanmaken
          van een <code>Breuk</code>-object twee parameters moeten doorgeven.
          Onze alternatieve syntax zou door Eclipse dus niet goedgekeurd worden.
        </p>
        <p>
          Het is echter mogelijk meerdere constructoren te defini&euml;ren.
          Dit staat bekend als <em>constructor overloading</em>.
        </p>
        <div data-question="extern">
          <p>
            Voeg een tweede constructor toe. Deze moet &eacute;&eacute;n parameter hebben, waarvan
            de waarde in het veld <code>teller</code> wordt bewaard. Het veld <code>noemer</code>
            wordt op <code>1</code> ge&iuml;nitialiseerd.
            De test <code>unaireConstructor</code> moet hierna slagen.
          </p>
        </div>
        <p>
          Je hebt nu twee constructoren die beiden de velden initialiseren. Dit is eigenlijk
          wat redundant; tijdens het programmeren is het zeer belangrijk alle vormen
          van redundantie te vermijden.
        </p>
        <p>
          Je tweede constructor kan in feite beroep doen op de eerste constructor:
          eigenlijk wil de tweede constructor de eerste oproepen met argumenten <code>(teller, 1)</code>.
          Dit is perfect mogelijk als volgt:
        </p>
        <pre><%= constructor_this %></pre>
        <div data-question="extern">
          <p>
            Voer deze wijziging door en ga na dat de eerder geslaagde tests nog steeds slagen.
          </p>
        </div>
        <p>
          In het algemeen zal gelden dat indien je meerdere constructoren hebt,
          er &eacute;&eacute;n "hoofdconstructor" alle velden zal initialiseren, en de andere
          constructoren zullen beroep doen op deze hoofdconstructor.
        </p>
      </section>

      <section>
        <h2>Unaire Operaties</h2>
        <p>
          We kunnen nu <code>Breuk</code>-objecten aanmaken en de er teller en noemer van opvragen. Dit is vrij beperkt;
          liefst zijn er ook operaties die we kunnen toepassen op onze breuken. Zo denken we aan
        </p>
        <ul>
          <li>Optelling: <code>a/b + c/d</code></li>
          <li>Aftrekking: <code>a/b - c/d</code></li>
          <li>Vermenigvuldiging: <code>a/b * c/d</code></li>
          <li>Deling: <code>a/b / c/d</code></li>
          <li>Tegengestelde: <code>-a/b</code></li>
          <li>Inversie: <code>(a/b)<sup>-1</sup></code></li>
          <li>Gelijkheid: <code>a/b == c/d</code></li>
          <li>
            Vergelijking: <code>a/b &lt; c/d</code>, <code>a/b &le; c/d</code>, <code>a/b &gt; c/d</code>, <code>a/b &ge; c/d</code>
          </li>
        </ul>
        <p>
          We beginnen met de tegengestelde: deze lijkt de eenvoudigste operatie om te implementeren. De tegengestelde breuk
          van een breuk a/b is de breuk -a/b.
        </p>

        <div data-question="fill-in-blanks">
          <p>
            Vul in
          </p>
          <%=
             HTML::unordered_list( [[1,2], [3,-6], [0,5]] ) do |a, b|
               "Tegengestelde van #{a}/#{b} = " + HTML::blank_inputbox( opposite_s(a,b), '', 'ignore_whitespace')
             end
          %>
        </div>

        <p>
          We kunnen deze operator implementeren als een methode:
        </p>
        <pre><%= opposite_code %></pre>
        <p>
          Merk op:
        </p>
        <ul>
          <li>
            De methode <code>tegengestelde</code> heeft als returntype <code>Breuk</code>. Dit houdt steek:
            het tegengestelde van een breuk is immers weer een breuk.
          </li>
          <li>
            In de body van de methode <code>tegengestelde</code> maken we een nieuwe breuk aan
            met een gepaste teller en noemer. 
          </li>
        </ul>
        <div data-question="extern">
          <p>
            Voeg de methode <code>tegengestelde</code> toe aan je code in Eclipse. Ga na of de test <code>test_tegengestelde</code> slaagt.
          </p>
        </div>

        <p>
          We focussen nu op invertering. De inverse van een breuk <code>a/b</code> is <code>b/a</code>.
        </p>
        <div data-question="fill-in-blanks">
          <p>
            Vul in
          </p>
          <%=
             HTML::unordered_list( [[1,2], [3,-6], [1,5]] ) do |a, b|
               "Inverse van #{a}/#{b} = " + HTML::blank_inputbox( invert_s(a,b), '', 'ignore_whitespace')
             end
          %>
        </div>
        <div data-question="extern">
          <p>
            Voeg de methode <code>inverse</code> toe aan je code in Eclipse. Wees zeker dat de tests <code>inverteer</code> en <code>inverteer_nul</code> slagen.
          </p>
        </div>
      </section>

      <section>
        <h2>Binaire Operaties</h2>
        <p>De operaties <code>tegengestelde</code> en <code>inverse</code> werken in op &eacute;&eacute;n breuk; vandaar
          de benaming <em>unaire operatoren</em>. Nu schakelen we over naar <em>binaire operatoren</em>:
          dit zijn operatoren waar twee breuken bij betrokken zijn.
        </p>
        <p>
          Laten we beginnen bij de optelling. De optelling van breuken kunnen we defini&euml;ren als volgt:
        </p>
        <p style="text-align:center;">
          <code>a/b + c/d = (a * d + b * c) / (b * d)</code>
        </p>
        <p>
          Deze formule zorgt ervoor dat beide breuken eerst op gelijke noemer gezet worden waarna de tellers
          opgeteld kunnen worden. In Java ziet de code er als volgt uit:
        </p>
        <pre><%= addition_code %></pre>
        <p>
          Korte bespreking:
        </p>
        <ul>
          <li>
            <p>
              Om breuken op te tellen heeft men twee breuken nodig. Bij de optelling <code>a/b + c/d</code>
              wordt de linkeroperand voorgesteld door het <code>Breuk</code>-object waarop de methode
              <code>telOp</code> wordt opgeroepen, en de rechteroperand wordt doorgegeven als parameter.
              In code ziet optellen er als volgt uit:
            </p>
            <pre><%= telOp_code %></pre>
          </li>
          <li>
            De code in de body hadden we op &eacute;&eacute;n lijn kunnen plaatsen,
            maar dit zou onoverzichtelijk zijn geweest. Daarom voerden we lokale variabelen in,
            genaamd <code>a</code> en <code>b</code>. Deze vormen een soort "klad",
            een tijdelijke werkplaats om tussenresultaten in te bewaren.
          </li>
        </ul>
        <div data-question="extern">
          <p>
            Voeg de methode <code>telOp</code> toe aan je code in Eclipse. Verzeker je dat de corresponderende tests slagen.
          </p>
        </div>
        <div data-question="extern">
          <p>
            Schrijf de methode <code>vermenigvuldig</code>. Vermenigvuldiging van breuken gaat als volgt:
          </p>
          <p style="text-align:center;">
            <code>a/b * c/d = (a * c)/(b * d)</code>
          </p>
          <p>Ga na dat de corresponderende tests slagen.</p>
        </div>
        <p>
          We focussen nu op de aftrekking. Wiskundig is dit gelijk aan
        </p>
        <p style="text-align:center;">
          <code>a/b - c/d = (a * d - b * c) / (b * d)</code>
        </p>
        <p>
          We zouden deze relatief ingewikkelde formule rechtstreeks kunnen implementeren,
          maar er bestaat een eenvoudiger verband:
        </p>
        <p style="text-align:center;">
          <code>a/b - c/d = a/b + (-c/d)</code>
        </p>
        <p>
          We kunnen dus de aftrekking herschrijven in functie van de optelling en het tegengestelde.
          Dit kan ook in code:
        </p>
        <pre><%= trekAf_code %></pre>
      </section>
    </div>
  </body>
</html>
