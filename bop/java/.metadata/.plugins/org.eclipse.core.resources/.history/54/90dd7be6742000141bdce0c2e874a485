
public class Jaarprogramma
{
    private Student student;
    
    private Inschrijving[] inschrijvingen;
    
    private int aantalInschrijvingen;
    
    public Jaarprogramma(Student student)
    {
        setStudent(student);
        
        inschrijvingen = new Inschrijving[20];
        aantalInschrijvingen = 0;
    }
    
    private void setStudent(Student student)
    {
        if ( student == null )
        {
            throw new IllegalArgumentException();
        }
        else
        {
            this.student = student;
        }
    }
    
    public void voegInschrijvingToe(Inschrijving inschrijving)
    {
        if ( !kanInschrijvingToevoegen(inschrijving) )
        {
            throw new IllegalArgumentException();
        }
        else
        {
            inschrijvingen[aantalInschrijvingen] = inschrijving;
            aantalInschrijvingen++;
        }
    }
    
    public void voegInschrijvingToe(int dag, int maand, int jaar, OPO opo)
    {
        Datum datum = new Datum(dag, maand, jaar);
        Inschrijving inschrijving = new Inschrijving( opo, datum );
        
        voegInschrijvingToe( inschrijving );
    }
    
    private boolean kanInschrijvingToevoegen(Inschrijving inschrijving)
    {
        return inschrijving != null && aantalInschrijvingen() < 20 && !bevatInschrijvingVoorOPO(inschrijving.getOpo());
    }
    
    public int aantalInschrijvingen()
    {
        return aantalInschrijvingen;
    }
    
    private boolean bevatInschrijvingVoorOPO(OPO opo)
    {
        for ( int i = 0; i != aantalInschrijvingen(); ++i )
        {
            Inschrijving inschrijving = this.inschrijvingen[i];
            
            if ( inschrijving.getOpo().zelfdeAls( opo ) )
            {
                return true;
            }
        }
        
        return false;
    }
    
    public int geefTotaalAantalStudiePunten()
    {
        int totaal = 0;
        
        for ( int i = 0; i != aantalInschrijvingen(); ++i )
        {
            totaal += this.inschrijvingen[i].getOpo().getStudiePunten();
        }
        
        return totaal;
    }
    
    public double inschrijvingsgeld()
    {
        return 65 + 8.8 * geefTotaalAantalStudiePunten();
    }
    
    public String geefFactuur()
    {
        String result = "";
        
        result += factuurHoofding();
        result += factuurInschrijvingen();
        result += factuurTotaal();
        
        return result;
    }
    
    private String factuurHoofding()
    {
        Student student = getStudent();
        
        return String.format( "Factuur\nStudent: %s %s met code %d", student.getVoornaam(), student.getNaam(), student.getCode() );
    }

    public Student getStudent()
    {
        return student;
    }
}
