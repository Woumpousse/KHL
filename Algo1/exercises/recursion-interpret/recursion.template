<%
  $exercise_number = 0

  def exercise_header
    "<h2>Oefening #{$exercise_number += 1}</h2>"
  end
%>
<!DOCTYPE html>
<html>
  <head>
    <title>Recursie</title>
    <meta charset="utf-8">
    <script src="jquery.js"></script>
    <script src="khl.js"></script>
    <link rel="stylesheet" href="khl.css">
  </head>
  <body>
    <div id="contents">
      <h1>Recursie</h1>

      <p>
       De meeste van deze oefeningen zijn gericht op inzicht: elk van onderstaande functies voeren een eenvoudige wiskunde bewerking uit.
       Bestudeer de code, werk de eerste gevallen handmatig uit en zoek uit welke bewerking de code voorstelt. Vervolgens
       zal het invullen van de velden zeer snel gaan.
      </p>

      <%=
         interpret(<<-END)
           function foo(x)
           {
               if ( x === 0 )
               {
                   return 0;
               }
               else
               {
                   return foo(x - 1);
               }
           }

           var x = foo(5);

           `hide:aux.printVar('x', x);`
         END
      %>

      <%=
         multi_interpret(<<-END.unindent.strip, ["p"], [ [0],[1],[2],[5],[6],[10],[15],[23],[104],[1056] ])
           function foo(x)
           {
               if ( x < 5 )
               {              
                   return x;
               }
               else
               {
                   return foo(x - 5);
               }
           }

           var x = foo(`param:p`);

           `hide:aux.printVar('x', x);`
         END
      %>

      <%=
         multi_interpret(<<-END.unindent.strip, [ "a", "b" ], [ [5,10], [11,10], [15,10], [19,10], [25,10], [29,10], [3,2], [4,2], [5,2], [15453,1000] ])
           function foo(x, y)
           {
               if ( x < y )
               {
                   return x;
               }
               else
               {
                   return foo(x-y, y);
               }
           }

           var x = foo(`param:a`, `param:b`);

           `hide:aux.printVar('x', x);`
         END
      %>

      <%=
         multi_interpret(<<-END.unindent.strip, [ "a", "b" ], [ [0,0], [0,1], [0,5], [1,0], [1,1], [1,2], [1,5], [2,4], [90,10] ] )
           function foo(x, y)
           {
               if ( x === 0 )
               {              
                   return y;
               }
               else
               {
                   return foo(x - 1, y + 1);
               }
           }

           var x = foo(`param:a`, `param:b`);

           `hide:aux.printVar('x', x);`
         END
      %>

      <%=
         multi_interpret(<<-END.unindent.strip, [ "a", "b" ], [ [0,0], [0,1], [1,0], [1,5], [2,5], [3,5], [10,10], [10,100], [100, 10] ])
           function foo(x, y)
           {
               if ( x === 0 || y === 0 )
               {
                   return 0;
               }
               else if ( x === 1 )
               {              
                   return y;
               }
               else
               {
                   return y + foo(x-1, y);
               }
           }

           var x = foo(`param:a`, `param:b`);

           `hide:aux.printVar('x', x);`
         END
      %>

      <%=
         multi_interpret(<<-END.unindent.strip, [ "a", "b" ], [ [0,0], [1,0], [2,0], [1,1], [2,1], [3,1], [5,2], [10,5], [1000,100] ])
           function foo(x, y)
           {
               if ( y === 0 )
               {
                   return x;
               }
               else
               {
                   return foo(x-1, y-1);
               }
           }

           var x = foo(`param:a`, `param:b`);

           `hide:aux.printVar('x', x);`
         END
      %>

      <%=
         multi_interpret(<<-END.unindent.strip, [ "a", "b" ], [ [0,0], [0,1], [1,0], [1,1], [2,2], [2,3], [3,2], [4,4], [123,123], [123,124] ])
           function foo(x, y)
           {
               if ( x === 0 || y === 0 )
               {
                   return x === 0 && y === 0;
               }
               else 
               {
                   return foo(x-1, y-1);
               }
           }

           var x = foo(`param:a`, `param:b`);

           `hide:aux.printVar('x', x);`
         END
      %>

      <%=
         multi_interpret(<<-END.unindent.strip, [ "a", "b" ], [ [0,0], [0,1], [0,2], [0,3], [1, 0], [1, 1], [1,2], [1,3], [1,0], [2,0], [3,0], [2,1], [5,3], [1234,4567] ])
           function foo(x, y)
           {
               if ( x === 0 )
               {
                   return true;
               }
               else if ( y === 0 )
               {
                   return false;
               }
               else
               {
                   return foo(x-1, y-1);
               }
           }

           var x = foo(`param:a`, `param:b`);

           `hide:aux.printVar('x', x);`
         END
      %>

    </div>
  </body>
</html>
